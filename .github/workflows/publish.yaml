name: Build

on:
  pull_request:
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 🔍 Detect .NET SDK versions from Directory.Build.props
        id: detect-sdks
        run: |
          PROPS="Directory.Build.props"
          echo "📄 Analyzing $PROPS"
          TARGETS=$(grep -oPm1 "(?<=<TargetFrameworks>)[^<]+" "$PROPS" || grep -oPm1 "(?<=<TargetFramework>)[^<]+" "$PROPS")
          echo "Detected TargetFrameworks: $TARGETS"
          VERSIONS=""
          for FRAMEWORK in $(echo $TARGETS | tr ';' ' '); do
            VERSION=$(echo $FRAMEWORK | grep -oP '\d+\.\d+')
            if [ ! -z "$VERSION" ]; then
              VERSIONS="$VERSIONS $VERSION"
            fi
          done
          echo "sdk_versions=$VERSIONS" >> "$GITHUB_OUTPUT"

      - name: 🧰 Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.detect-sdks.outputs.sdk_versions }}
          include-prerelease: true

      - name: 📦 Restore
        run: dotnet restore

      - name: 🛠️ Build
        run: dotnet build --no-restore --configuration Release

      - name: 🧪 Test
        run: dotnet test --no-build --configuration Release --verbosity normal

  publish:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 🔍 Detect .NET SDK versions from Directory.Build.props
        id: detect-sdks
        run: |
          PROPS="Directory.Build.props"
          echo "📄 Analyzing $PROPS"
          TARGETS=$(grep -oPm1 "(?<=<TargetFrameworks>)[^<]+" "$PROPS" || grep -oPm1 "(?<=<TargetFramework>)[^<]+" "$PROPS")
          echo "Detected TargetFrameworks: $TARGETS"
          VERSIONS=""
          for FRAMEWORK in $(echo $TARGETS | tr ';' ' '); do
            VERSION=$(echo $FRAMEWORK | grep -oP '\d+\.\d+')
            if [ ! -z "$VERSION" ]; then
              VERSIONS="$VERSIONS $VERSION"
            fi
          done
          echo "sdk_versions=$VERSIONS" >> "$GITHUB_OUTPUT"

      - name: 🧰 Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.detect-sdks.outputs.sdk_versions }}
          include-prerelease: true

      - name: 📌 Show MinVer version
        run: dotnet build --no-restore --configuration Release src/Pelican.Mediator/Pelican.Mediator.csproj | grep "Project version" || true

      - name: 📦 Pack
        run: dotnet pack src/Pelican.Mediator/Pelican.Mediator.csproj --no-build --configuration Release --output ./nupkgs

      - name: 🚀 Push to NuGet
        run: dotnet nuget push ./nupkgs/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
