name: Build

on:
  pull_request:
  release:
    types: [published]

jobs:
  detect-sdks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 🔍 Parse SDK versions from Directory.Build.props
        id: set-matrix
        run: |
          PROPS="Directory.Build.props"
          echo "📄 Analyzing $PROPS"
          TARGETS=$(grep -oPm1 "(?<=<TargetFrameworks>)[^<]+" "$PROPS" || grep -oPm1 "(?<=<TargetFramework>)[^<]+" "$PROPS")
          echo "Detected TargetFrameworks: $TARGETS"

          VERSIONS=()
          for FRAMEWORK in $(echo $TARGETS | tr ';' ' '); do
            VERSION=$(echo $FRAMEWORK | grep -oP '\d+\.\d+')
            if [ ! -z "$VERSION" ] && [[ ! " ${VERSIONS[*]} " =~ " ${VERSION} " ]]; then
              VERSIONS+=("$VERSION")
            fi
          done

          # Build JSON matrix
          MATRIX_JSON=$(printf '%s\n' "${VERSIONS[@]}" | jq -R . | jq -s '{dotnet: .}')
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"
          echo "🧩 Matrix: $MATRIX_JSON"

  install-sdks:
    needs: detect-sdks
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-sdks.outputs.matrix) }}
    steps:
      - name: 🧰 Install .NET SDK ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
          include-prerelease: true

  build-and-test:
    needs: install-sdks
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 📦 Restore
        run: dotnet restore

      - name: 🛠️ Build
        run: dotnet build --no-restore --configuration Release

      - name: 🧪 Test
        run: dotnet test --no-build --configuration Release --verbosity normal

  publish:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: [install-sdks, build-and-test]

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 📌 Show MinVer version
        run: dotnet build --no-restore --configuration Release src/Pelican.Mediator/Pelican.Mediator.csproj | grep "Project version" || true

      - name: 📦 Pack
        run: dotnet pack src/Pelican.Mediator/Pelican.Mediator.csproj --no-build --configuration Release --output ./nupkgs

      - name: 🚀 Push to NuGet
        run: dotnet nuget push ./nupkgs/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
